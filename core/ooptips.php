<?php

// Интерфейс содержит только публичные методы
// Одному классу можно имплементировать несколько интерфейсов (см BattleToads)
interface MovebleInterface
{
    /**
     * Перемещает объект по координатам
     * @param int $x
     * @param int $y
     * @return void - void если метод ничего не возвращает
     */
    public function move($x, $y);

    public function run();

    public function jump();
}

abstract class Animal implements MovebleInterface {
    protected $health;
    protected $hitPower;

    public function run()
    {
        echo 'Method run';
    }

    abstract public function move($x, $y); // абстрактные методы обязательно переопределяются в классах-наследниках

    public function jump()
    {
        echo 'Method Jump';
    }
}

class BattleToad extends Animal
{
    private $name;
    private $color;

    public function move($x, $y)
    {
    }

    public function __construct($name, $color = 'green')
    {
        $this->name = $name;
        $this->color = $color;
        $this->health = 100;
        $this->hitPower = 5;
    }
}

class Mosquit extends Animal
{
    private $lengthNose;

    public function move($x, $y)
    {
    }

    public function __construct()
    {
        $this->lengthNose = rand(1, 10);
        $this->health = 25;
        $this->hitPower = 1;
    }

    public function jump()
    {
        parent::jump(); // TODO: Change the autogenerated stub
        echo 'this is POLIMORPHIZM!';
    }
}

// Про статические классы, методы
// Класс, у которого все методы статичные - называется статичным
// Статичный метод принадлежит классу, а не объекту
class MathFoo
{
    const PI = 3.14;

    public static $example = 5;

    public static function sum($a, $b)
    {
        self::div($a, b); // об
        return $a + $b;
    }

    public static function div($a, $b)
    {
        $circle = self::PI * $a * $a;
        return $a / $b;
    }
}

$res = MathFoo::div(5,3);
MathFoo::$example;
